package com.springapitest.restapi.controllers;

import com.springapitest.restapi.utility.StringResponse;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.springapitest.restapi.models.Card;
import com.springapitest.restapi.repositories.CardRepository;

import com.springapitest.restapi.models.Product;
import com.springapitest.restapi.repositories.ProductRepository;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@RestController // Defines a Controller
@RequestMapping(path = "/") // URL's starts with / (after Application path)

public class CardController {

    // This means to get the bean called xRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private CardRepository cardRepository;
    @Autowired
    private ProductRepository productRepository;



    /*
     * @PostMapping(path="/add") // Map ONLY POST Requests
     * public @ResponseBody String addNewCard (@RequestParam String cardId,
     *
     * @RequestParam String holder) {
     * // @ResponseBody means the returned String is the response, not a view name
     * // @RequestParam means it is a parameter from the GET or POST request
     *
     * Card c = new Card();
     * c.setName(name);
     * n.setEmail(email);
     * userRepository.save(n);
     * return "Saved";
     * }
     */


    @GetMapping(path = "/card/{productId}/number")
    public StringResponse generateCardNumber(@PathVariable("productId") Long productId) {
        try {
            String idFirstPart = Long.toString(productId);
            if(idFirstPart.length() != 6){
                throw new RuntimeException("invalid productId");
            }

            //since productId is unique this is only going to return a list which size is either zero or one
            List<Product> products = productRepository.findByProductId(productId);
            if(products.size()==1) {

                //generates the id given the specifications (6digits from productid + 10 random digits)
                char chars[] = new char[10];
                for (int i = 0; i < 10; i++) {
                    int randDigit = (int) Math.floor(Math.random() * 10); //generates a digit (0-9)
                    chars[i]=(Integer.toString(randDigit).charAt(0));
                }
                String idSecondPart = new String(chars);
                String completeId = idFirstPart + idSecondPart;

                Card cardToSave = new Card();
                cardToSave.setCardId(completeId);

                //links with the only element in the list
                cardToSave.setProduct(products.get(0));
                cardToSave.setHolder("Jhonatan Rivera");
                cardToSave.setType("Debito");
                cardToSave.setExpiration(LocalDate.now().plusYears(3));
                cardToSave.setActive(false);
                cardToSave.setBalance(new BigDecimal(0.00));

                cardRepository.save(cardToSave);

                return new StringResponse(completeId);
            }else{
                return new StringResponse("Invalid product id.");
            }

        }
        catch(Exception e) {
            System.out.println("Something went wrong.");
            System.out.println( "Error message: "+ e.getMessage());
            return new StringResponse("Error: "+ e.getMessage());
        }
    }



}
