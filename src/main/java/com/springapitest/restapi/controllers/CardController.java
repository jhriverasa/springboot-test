package com.springapitest.restapi.controllers;

import com.springapitest.restapi.utility.StringResponse;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.springapitest.restapi.models.Card;
import com.springapitest.restapi.repositories.CardRepository;


import java.math.BigDecimal;
import java.time.LocalDate;

@RestController
@RequestMapping(path = "/") // URL's starts with /

public class CardController {

    // This means to get the bean called xRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private CardRepository cardRepository;



    //1. 1) Generar n√∫mero de tarjeta
    @GetMapping(path = "/card/{productId}/number")
    public ResponseEntity<Object> generateCardNumber(@PathVariable("productId") String productId) {
        try {
            String idFirstPart = productId;
            if(idFirstPart.length() != 6){
                throw new RuntimeException("invalid productId");
            }

            //generates the id given the specifications (6digits from productid + 10 random digits)
            char chars[] = new char[10];
            for (int i = 0; i < 10; i++) {
                int randDigit = (int) Math.floor(Math.random() * 10); //generates a digit (0-9)
                chars[i]=(Integer.toString(randDigit).charAt(0));
            }
            String idSecondPart = new String(chars);
            String completeId = idFirstPart + idSecondPart;

            Card cardToSave = new Card();

            //Creates the new card
            cardToSave.setCardId(completeId);
            cardToSave.setProductId(productId);

            cardToSave.setHolder("Jhonatan Rivera");
            cardToSave.setType("Debito");
            cardToSave.setExpiration(LocalDate.now().plusYears(3));
            cardToSave.setActive(false);
            cardToSave.setBalance(new BigDecimal(0.00));

            cardRepository.save(cardToSave);

            //responds with the Id
            return new ResponseEntity<>( cardToSave, HttpStatus.OK);


        }
        catch(Exception e) {
            System.out.println("Something went wrong.");
            if(e.getMessage().indexOf("Duplicate entry") != -1){
                //sends a default message so that it avoids sending sensible data
               return new ResponseEntity<>(new StringResponse("Error: an error ocurred, try again."),HttpStatus.BAD_REQUEST);
            }
            System.out.println( "Error message: "+ e.getMessage());
            return new ResponseEntity<>(new StringResponse("Error: "+ e.getMessage()),HttpStatus.BAD_REQUEST);
        }
    }



}
